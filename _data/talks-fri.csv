Name,Biography,Title,Abstract
Jeff Bezanson,,Invited talk,TBC
Jake Bolewski,"Jake Bolewski has been using Julia for about a year and a half and currently works in the Julia group at MIT. In a past life he was a biologist working in the area of super-resolution / single molecule microscopy.",Work towards a pure Julia compiler frontend,"Julia's compiler is implemented in three different programming languages, Scheme, Julia, and C/C++. This separation is an issue as it reduces modularity in the compiler and makes implementing new language features and optimizations difficult. As Julia begins to mature, I argue that now is the right time to start thinking about replacing parts of the compiler with Julia code. The most natural place to start is the compiler frontend which is currently written in Scheme. I will demo some work towards rewriting parts of the frontend in pure Julia. I hope to demonstrate that a pure Julia frontend will be beneficial in terms of features, performance, and opportunities for tool integration."
Westley Hennigh,"Westley Hennigh has been working with Julia since late 2012. He built a system for running models written in Julia across machines in my butt, has contributed to the language, and maintains a variety of packages.",Who optimizes the optimizers? Can genetic algorithms help us to optimize the layout of llvm IR passes used to compile Julia code?,"I’ve [started a project](https://github.com/WestleyArgentum/pass-optimizer) which configures Julia to load IR passes dynamically and runs a genetic algorithm that features [synapsing variable length crossover](https://books.google.com/books?id=3haO5vOc12cC&pg=PA198&lpg=PA198&ots=xIjc04cd22&sig=gzUjpqLzEy9w2VLtawMTs9TQ9_Q&hl=en&sa=X&ei=nkIjVdqDF4edsAWFpoGgBg&ved=0CFsQ6AEwBw#v=onepage). We’ll discuss the challenges involved in measuring the performance of IR pass layouts, the algorithm, and the results so far."
Keno Fischer,"Originally from Germany, Keno Fischer is currently finishing is Master's and Bachelor's degrees in Physics and Mathematics at Harvard University. Keno has contributed to Julia core development for more than three years, contributing such features as the Windows port, the improved REPL as well as numerous other bug fixes and minor improvements. Additionally, he is the author of a large variety of Julia packages, including SIUnits.jl, BinDeps.jl and Cxx.jl. Since last year, Keno has also been working with Julia Computing, aiming to make Julia viable not just in research, but in industry as well.","Shaving the Yak: Why Julia now has one of the best C++ FFIs and what to do with it","At last years JuliaCon, I presented two highly experimental projects I was working on the Julia C++ FFI, Cxx.jl and an LLDB-based debugger for Julia. Since last year, the C++ FFI has been completely
rewritten based on staged functions, has gained an interactive C++ REPL mode and has reached a
point where it has become useful, not only as a toy research project but has become usable for real
applications. In this follow-on talk, I will demonstrate these new capabilities and explain how to use
them to interact with C++ libraries. Additionally, I will given an update on the (still experimental, but improved) LLDB-based debugger, discussing what features are ready, what problems exist and what the future holds."
Mauro Werder,"I am a glaciologist, specializing in simulations of water flow at the base of glaciers.  In the Julia community, I am probably mostly known for my experimental package Traits.jl which brings interface/trait/type-class based programming to Julia.","Traits.jl, interfaces for Julia","[Traits.jl](https://github.com/mauro3/Traits.jl) is an experimental package which brings interface/trait/type-class based programming to Julia.  Traits.jl implements two main features: (1) to group types, or tuples of types, into sets (traits) disconnected from the type hierarchy; and (2) to define methods which dispatch on those traits.  The grouping is achieved by specifying certain constraints which a type has to fulfill, typically implementing certain functions but other constraints are allowed too.  For example, a trait `Plus{X,Y}` could be defined as the set of all type tuples `(X,Y)` such that a method `+(::X,::Y)` exists.  Note that this set is (automatically) expanded as new methods to `+` are added. The dispatch on traits is implemented on top of the normal type-dispatch.  For example, `foo{X, Y; Plus{X,Y}}(x::X, y::Y) = ...` would define a method which is dispatched to for all `(X,Y) ∈ Plus{X,Y}`.

I will present the following: a simple example on how Traits.jl works and can be useful; its inner workings; and use-cases in Base and for packages.  I hope to have a discussion on features, roadblocks, a more stable implementation, and whether something like this would be useful for Base."
Jacob Quinn,"Currently a technical consultant at Domo in Utah. Just graduated from Carnegie Mellon in Pittsburgh. Developing Julia for about 3 years now, and own/maintain the ODBC, SQLite, SuffixArrays, TimeZones, Dates, and Yelp packages, as well as the Sublime-IJulia package for Sublime Text. Also been involved in several significant projects involve Base Julia functionality.",What Happens When: From Parse-Time to Compile-Time,"Anyone who has poked around the Julia manual has come across a variety of terms and quick descriptions of what happens when code gets compiled. Quips of 'macro this', and 'staged function that', parse-time, compile-time, code lowering, type inference, aggressive specialization, and the list goes on.

Finally, the entire process is all brought together and made sensible; fear the JIT no more."
Douglas Bates,"U. of Wisconsin - Madison","Mixing it up: Adventures with statistical models and sparse matrices","
Estimating the parameters in a 'mixed-effects' model (also called
'variance components' or 'hierarchical' or 'multilevel') requires
optimizing a log-likelihood.  Until recently it was not possible to
fit models with multiple non-nested sources of variability such as
'subject' and 'item' or longitudinal data on 'student', 'classroom',
'school', 'district', etc.  The introduction of sparse matrix
representations and some clever re-arrangement of terms in the
log-likelihood made it possible to evaluate the log-likelihood by
solving a large, sparse penalized least square problem.  But current
implementations can still take days to optimize this criterion for
complicated models fit to large data sets, because the sparse matrix
methods can't take advantage of the special structure in the problem.
Because Julia combines the flexibility of a high-level language with
the capability of achieving high performance, it is possible to
exploit these special structures, in many cases reducing the time to
fit a model by one or two orders of magnitude.  User-defined types,
multiple dispatch, in-place evaluation, and devectorization are key
characteristics of Julia for this application."
Jack Poulson,"Jack Poulson is the lead developer of Elemental, a distributed-memory library for direct linear algebra and optimization, and an Assistant Professor of Mathematics and Member of the Institute for Computational and Mathematical Engineering at Stanford University. He has contributed a native Julia multifrontal Cholesky (MultiFrontalCholesky.jl) and is a contributor to Elemental.jl, which will provide distributed-memory dense linear algebra, sparse-direct solvers, and Interior Point Methods to Julia.","Distributed-memory ""direct"" linear algebra and optimization","This talk will give a broad overview of recent algorithmic developments within the C++11/MPI library [Elemental](http://libelemental.org) and ongoing efforts to expose interfaces to external languages (i.e., C, Python, and Julia). In particular, the talk will discuss recent advancements in Elemental's distributed a priori regularized quasi-semidefinite sparse-direct solvers, their application to sparse Interior Point Methods and sparse generalized least squares problems, and progress towards interactive interfaces on large-scale machines."
Zhang Xianyi,,Introduction to OpenBLAS and BLIS,"The BLAS (Basic Linear Algebra Subprograms) is a fundamental interface in scientific computing. In this talk, I will introduce the [OpenBLAS](http://www.openblas.net/) and [BLIS](https://github.com/flame/blis) projects. OpenBLAS is an optimized open source BLAS implementation based on GotoBLAS2, and the default BLAS library used in Julia. OpenBLAS supports modern Intel, AMD, and ARM processors. By hand-written or automatically generated (via the AUGEM) assembly kernels, we can achieve competitive performance with vendor BLAS libraries.

BLIS is a portable framework for instantiating BLAS-like libraries. The framework was designed to isolate essential kernels of computation that, when optimized, immediately enable optimized implementations of most of its commonly used and computationally intensive operations.
"
Viral,https://in.linkedin.com/in/viralbshah,The present and future of sparse matrices in Julia.,"In this talk, I will describe the current status of sparse matrices in Julia. About half the talk will focus on walking the audience through the current design, and feature set. The other half will focus on tensions in the current design, what different people want from sparse matrices, and a discussion on how to take this forward."
David P. Sanders,"I am an associate professor of computational physics in the Department of Physics, Faculty of Sciences, National University of Mexico (UNAM). I first heard about Julia in the summer of 2013 at SciPy, but did not really discover it until the beginning of 2014. Since then I have switched to using it full time for both teaching and research. I am an author of the `ValidatedNumerics.jl` and `BilliardModels.jl` packages. At SciPy 2014, I gave a 4-hour Julia tutorial, listed on the Learning section of the Julia web-page, which has over 20,000 views. ",Validated numerics in Julia,"We will present features of the `ValidatedNumerics.jl` package, which provides tools for rigorous numerical calculations in Julia via interval arithmetic, and its application to validated computation in dynamical systems.

In particular, in combination with the `BilliardModels.jl` package, we will show how to solve one of the ""hundred-dollar, hundred-digit challenge"" problems [1,2] by computing a guaranteed trajectory of a billiard model to arbitrary precision.

[1] http://people.maths.ox.ac.uk/trefethen/hundred.html
[2] https://www.siam.org/pdf/news/388.pdf
"
Luis Benet,"I am Associate Professor at the Instituto de Ciencias Físicas of the National University of Mexico (UNAM). My main fields of interest are classical and quantum chaos, random matrix theory and dynamical astronomy. Regarding Julia, I spotted a buggy behavior of `binomial` (#6154). Together with David Sanders, we develop and maintain `TaylorSeries.jl` and `ValidatedNumerics.jl`. I also use Julia to implement members of the so-called k-body gaussian embedded ensemble of random matrices. We are using Julia in our lectures.",Taylor series expansions in Julia,"I will describe some of the design and use of `TaylorSeries.jl`, which is a package to manipulate Taylor expansions in one or more independent variables. Results on integrations on a three-body problem will be presented.
"
Hongbo Rong,"A researcher at Programming Systems Lab in Intel. Worked on software pipelining, binary translation, and recently HPC.
Before that, a developer  in Microsoft Visual Studio. Engineered local scheduler and tree register allocator in Phoenix compiler, and the C++ type system in Visual Studio 2011.
Best Paper Awards at CGO 2004 and 2014.
Developed an initial version of Julia2C. Developing a Julia package, Sparse Accelerator.",Sparse Accelerator,"High-performance computing (HPC) on sparse data structures like graphs is becoming increasingly important in computational biology, web search, and knowledge discovery, etc.  Unlike traditional HPC applications that deal with regular data structures, sparse computation has unique challenges: its performance is often bound by the memory bandwidth,and  its parallelism is dependent on the specific input data. It is a very time-consuming process to speedup such workloads, usually taking an expert several months or years to achieve close-to-peak performance for a new architecture.

We propose an external Julia package, called Sparse Accelerator, to  automatically optimizes sparse applications. It co-designs compiler, library and runtime to exploit the potential.
"
Robert Moss,"Robert Moss is an assistant staff member at Lincoln Laboratory in the Surveillance Systems Group. He joined Lincoln Laboratory as a co-op while receiving his bachelor's degree in computer science from Wentworth Institute of Technology in 2014, where his research included modeling the rotation curve of galaxies in Julia. At Lincoln Laboratory, his research focuses on development and analysis of the next-generation airborne collision avoidance system.",Using Julia as a Specification Language for the Next-Generation Airborne Collision Avoidance System,"This talk outlines how the FAA and the international safety community is using Julia in the development and specification of the next generation aircraft collision avoidance system. Historically, pseudocode was used with separate implementations for the validation of the system. Today, we utilize Julia to auto generate our specification document and replaced pseudocode in favor an executable specification written in Julia."
Lars Ruthotto and Eldad Haber,"Lars Ruthotto is an assistant professor in the Department of Mathematics and Computer Science at Emory University. Eldad Haber is a professor at the Department of Earth and Ocean Sciences at UBC in Vancouver and NSERC Industrial Research Chair in Computational Geoscience.

Lars and Eldad are interested in scientific computing for inverse problems, especially electromagnetic imaging in geophysical applications. They both use Julia for teaching but mostly in their research. They contributed to Julia a wrapper for MUMPS and a few iterative solvers for large linear systems.",Distributed Algorithms for Full-Waveform-Inversion (FWI),"Full waveform inversion (FWI) is commonly used in geophysical explorations. The goal  of FWI is to estimate a model  (velocity) of the subsurface from measurements of the ground’s responses to seismic vibrations. FWI is known to be a challenging inverse problem that contains many local minima and can be ill-posed.

FWI is computationally demanding:  estimating a model that accurately predicts the measurements requires a large number of simulations each of which is obtained from solving the Helmholtz equation over many sources and frequencies.

This three hours hands-on workshop provides a brief introduction into FWI and the main cornerstones of inversion codes, including:
1. Finite Volume discretization of Helmholtz equation
1. Numerical optimization methods for solving the inverse problem.
1. Parallelization of the optimization problem

We will show how to design an inversion code that can work well for small to medium size problems and can be scaled up to large scale problems. Special emphasis will be put on Julia’s potential to distribute the PDE solves amongst all available workers."
Iain Dunning,"I've been working with Julia for over two years, and have contributed mostly packages: JuliaOpt, Coverage.jl, FactCheck.jl, Humanize.jl, GraphLayout.jl, as well as countless patches to other packages and to Julia itself. My other main contribution is the development of pkg.julialang.org and the PackageEvaluator.jl package ecosystem testing service.",JuliaOpt: Optimization-related projects in Julia,"In this talk we will present the JuliaOpt suite of packages for optimization in Julia. In particular, we will focus on how these packages interact and can be composed to solve a variety of problems.

We will begin with a discussion of two different modeling systems, JuMP and Convex.jl, and how they can be used to model different types of problems. We then move to describing the MathProgBase interface, which provides a rich abstraction over a variety of solvers (both pure Julia and external commercial and open-source libraries). Finally we will discuss how the JuliaOpt stack enables both rapid development of models and solvers, and outline future plans for JuliaOpt."
Weijian Zhang,"I am a PhD student in Numerical Analysis at the University of Manchester. I  develop MatrixDepot: a test matrix collection for Julia and PolarFact: a Julia package for the matrix polar decomposition.  My research interest is centrality measures on evolving graphs and I am currently developing EvolvingGraph: a dynamic graph analysis framework in Julia.
",Analyzing Evolving Graphs with Julia,"We present a Julia framework for analyzing large evolving graphs (also known as evolving networks or temporal graphs).  We describe how Julia's type system make it easy to represent evolving graphs and show how centrality measure can be generalized to a dynamic setting. Being written in Julia, it has a short development period and easy to maintain yet has a competing performance."
Blake Johnson,"Blake Johnson is a physicist working on building small quantum processors with superconducting qubits. He contributed to some of the first quantum algorithm demonstrations, and has extensive experience building FPGA-based hardware for controlling quantum systems. This custom hardware enables a new class of quantum feedback experiments requiring sub-microsecond measurement-to-control latency.

Blake is helping to build a growing set of packages relevant to quantum information processing, including Cliffords.jl for efficient simulation of a certain class of quantum circuits.",Quickly building simulations of quantum systems,"Powerful simulation tools are essential to early explorations of small quantum devices. I will introduce QSimulator.jl, a package to facilitate such simulations with a straightforward algebraic syntax to compose systems and interactions from a common toolbox. The package takes advantage of Julia's parallel processing capabilities to distribute parameter sweeps across many nodes, greatly accelerating common workflows. "
Kevin Damazyn and Mark Tabor,"Kevin: Recent SLU Computer Science (BS) graduate who currently works at Asynchrony Solutions in St. Louis.
  Mark: Mark Tabor graduated from Saint Louis University with a BS in Computer Science.  He is a former Marine and Iraq war veteran.  His research interests involve Machine Learning and NLP.","SLU-TMI - TextMining.jl","The SL Text Mining Initiative is an interdisciplinary project between the Computer Science and English departments. The initial focus is the construction of open source tools, in Julia, to facilitate text mining research. The project will then use these large-scale, computational tools to explore whether common delimiters of time period (namely, the concept of literary generations) operate at the level of lexical, linguistic, or stylistic patterns.  Using this information, natural language processing models will be constructed to classify unseen texts into these literary generations."
Simon Kornblith,"Simon Kornblith is a graduate student in Brain and Cognitive Sciences at MIT. He has used Julia in his work since 2013. He contributes to several Julia packages, including HDF5, MAT, DSP, and DataArrays, as well as to Julia itself. ",JLD: Saving Julia objects to the disk in HDF5 format,"The JLD module, included in HDF5.jl, provides a way to save and read any Julia data structure using the hierarchical data format HDF5. JLD maps Julia types and immutables directly to HDF5 compound types, providing efficient and structured on-disk storage that is robust to changes in code and in Julia itself. I will give an overview of how this mapping works, its strengths, and its pitfalls."
Avik Sengupta,"Avik Sengupta has built risk and trading systems in Java for investment banks for over a decade. Three years ago he discovered Julia, and hasn't looked back since. He is a Julia contributor and the maintainer of a few Julia packages.

",Serving up : A practical guide to exposing Julia APIs on the web,"The ability to expose Julia code on the internet, via HTTP, can be useful in many circumstances. In this lightning talk, we will see a practical demonstration of how to create a REST API from any Julia code, both in a pure Julia environment, as well as within a hybrid infrastructure.  We will look at some the security and stability requirements for this functionality, and the options for deployment."
Tanmay Mohapatra,https://www.linkedin.com/in/tanmaykm,ProtoBuf.jl - Interfacing Julia with Complex systems using Protocol Buffers,"Protocol buffers are a language-neutral, platform-neutral, extensible way of serializing structured data for use in communications protocols, data storage, and more.

ProtoBuf.jl is a Julia implementation for protocol buffers which makes it possible for Julia applications communicate with other applications in a distributed, heterogeneous environment. For example, the Elly.jl package uses ProtoBuf extensively to integrate with HDFS and Yarn. However the use cases are many more."
Bob Carpenter,"Bob Carpenter is a research scientist in computational statistics
(Columbia University).  He designed the Stan probabilistic programming
language and is one of the Stan core developers.

Bob has a Ph.D. in cognitive and computer science (University of
Edinburgh), worked as a professor of computational linguistics
(Carnegie Mellon University), an industrial researcher and programmer
in speech recognition and natural language processing (Bell Labs,
SpeechWorks, LingPipe).  In addition to working on Stan, he's written
two books on computational linguistics, many papers, and the widely
used LingPipe natural language processing toolkit.","Stan.jl: Statistical Modeling and Inference Made Easy","Stan.jl is the Julia interface to Stan, an open-source, imperative
probabilistic programming language.  Stan allows you to express a
customized statistical model and conditioned on data, perform optimization
for classical penalized maximum likelihood estimation or sampling for
full Bayesian inference."
Eric Davies,"Eric works in R&D at Invenia Technical Computing: a small, cutting-edge startup targeting inefficiencies in electrical grids. His interests lie in machine learning but his contributions to the Julia community have been database-related: Eric wrote and maintains PostgreSQL.jl and DBAPI.jl, and contributed to DBI.jl. ",Towards A Consistent Database Interface,This talk will compare and demonstrate the two proposed Julia database interfaces DBI.jl and DBAPI.jl and solicit feedback on the community's desired direction.
Amit Murthy,,Cluster Managers and Parallel Julia,"This presentation will cover
- a short introduction to parallel Julia internals
- writing a custom cluster manager
- demo of a cluster manager using ZeroMQ for transport"
Kiran Pamnany and Ranjan Anantharaman,"Kiran works at Intel's Parallel Computing Lab, on enabling HPC application scaling on large IA-based clusters. His primary research focus is parallel programming models, and the underlying low-overhead, high performance software stacks required.

Together with the core Julia developers, Kiran has built a multi-threading infrastructure for Julia -- the ``threading`` branch on Github.

Ranjan is completing his internship at Intel Labs, on his way to earning his undergraduate degree in computer science from BITS-Pilani, Hyderabad. He has built and analyzed some of the first multi-threaded Julia programs.",Multi-threading Julia,"Shared memory parallelism is essential for high performance on today's multi- and many-core architectures. We will present the threading infrastructure built into Julia, the programming model presented, and discuss design choices and alternatives.

We will then present our experiences with, and the results of, applying this infrastructure to scale a number of different workloads written in Julia; often demonstrating performance comparable with C."
Patrick Sanan,"Patrick Sanan is a postdoctoral researcher at USI, Lugano, working on the GeoPC PASC project to advance the state of the art of preconditioners within large geophysics simulations. He is interested in the use of Julia for HPC.",Using Julia on a Cray Supercomputer,"Julia can now be used on a Cray supercomputer! We detail how, relying on recent upgrades by Amit Murty to the MPI ClusterManager. To work with Cray's paradigm of hiding details of the compute nodes from the user, all communication is done through MPI, and master and worker threads are uniformly launched as Julia processes running on compute nodes. This has the advantage of simplicity, and takes advantage of Cray's optimized MPI implementation. This procedure allows for extremely portable code which can use any Julia ClusterManager implementation, allowing for development on a laptop and deployment on the largest supercomputers."
Hongbo Rong,"A researcher at Programming Systems Lab in Intel. Worked on software pipelining, binary translation, and recently HPC.
Before that, a developer  in Microsoft Visual Studio. Engineered local scheduler and tree register allocator in Phoenix compiler, and the C++ type system in Visual Studio 2011.
Best Paper Awards at CGO 2004 and 2014.
Developed an initial version of Julia2C. Developing a Julia package, Sparse Accelerator.",Sparse Accelerator,"High-performance computing (HPC) on sparse data structures like graphs is becoming increasingly important in computational biology, web search, and knowledge discovery, etc.  Unlike traditional HPC applications that deal with regular data structures, sparse computation has unique challenges: its performance is often bound by the memory bandwidth,and  its parallelism is dependent on the specific input data. It is a very time-consuming process to speedup such workloads, usually taking an expert several months or years to achieve close-to-peak performance for a new architecture.

We propose an external Julia package, called Sparse Accelerator, to  automatically optimizes sparse applications. It co-designs compiler, library and runtime to exploit the potential.
"
